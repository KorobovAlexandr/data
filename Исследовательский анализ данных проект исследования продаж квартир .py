#!/usr/bin/env python
# coding: utf-8

# # Исследование объявлений о продаже квартир
# 
# В вашем распоряжении данные сервиса Яндекс.Недвижимость — архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктов за несколько лет. Нужно научиться определять рыночную стоимость объектов недвижимости. Ваша задача — установить параметры. Это позволит построить автоматизированную систему: она отследит аномалии и мошенническую деятельность. 
# 
# По каждой квартире на продажу доступны два вида данных. Первые вписаны пользователем, вторые — получены автоматически на основе картографических данных. Например, расстояние до центра, аэропорта, ближайшего парка и водоёма. 

# План работ:
# 1 этап.
# Изучим датасет ,используем для этого .info(), вывод первых и посследних столбцов таблицы.
# Добавим описание данных в нашу тетрадку.
# Выведем сводную статистику по таблице.
# Построим гистограммы по каждому столбцу.
# Определим пропуски в столбцах, посчитаем их сумму и определим количество явных дубликатов.
# Вывод
# 2 этап.
# Проанализируем количество пропусков, оценим на сколько оно влияет на наши дальшнейшие исследования. Обработаем их , методом удаления либо замены на определённое значение в случае необходимости.
# Изменим тип данных в столбцах где это необходимо.
# Вывод
# 3этап.
# Добавляем новые столбцы и проводим расчёты , согалсно задания.
# Вывод
# 4 этап
# Строим гистограммы методом plot по интересующим нас столбцам с интересующими нас параметрами.
# Сравниваем на графиках стоимость недвижимости с интересующими нас параметрами( по заданию)
# Определяем как быстро продаются квартиры, что больше всего влияет на стоимость недвижимости.
# Вывод
# 5 Общий вывод
# </div>
# 
# 
# 

# ### Откройте файл с данными и изучите общую информацию. 

# In[1]:


import pandas as pd #Импортируем библиотеку пандас


# In[2]:


#Присваиваем переменной data чтение интересующего нас файла
data = pd.read_csv('/datasets/real_estate_data.csv',sep = '\t')


# In[3]:


data.info() # Используем метод info


# In[6]:


# Выведем 5 первых строк 
data.head()


# In[7]:


#Выведем 5 последних строк 
data.tail()


# In[8]:


#Добавим сюда описание данных для удобства :
#airports_nearest — расстояние до ближайшего аэропорта в метрах (м)
#balcony — число балконов
#ceiling_height — высота потолков (м)
#cityCenters_nearest — расстояние до центра города (м)
#days_exposition — сколько дней было размещено объявление (от публикации до снятия)
#first_day_exposition — дата публикации
#floor — этаж
#floors_total — всего этажей в доме
#is_apartment — апартаменты (булев тип)
#kitchen_area — площадь кухни в квадратных метрах (м²)
#last_price — цена на момент снятия с публикации
#living_area — жилая площадь в квадратных метрах (м²)
#locality_name — название населённого пункта
#open_plan — свободная планировка (булев тип)
#parks_around3000 — число парков в радиусе 3 км
#parks_nearest — расстояние до ближайшего парка (м)
#ponds_around3000 — число водоёмов в радиусе 3 км
#ponds_nearest — расстояние до ближайшего водоёма (м)
#rooms — число комнат
#studio — квартира-студия (булев тип)
#total_area — общая площадь квартиры в квадратных метрах (м²)
#total_images — число фотографий квартиры в объявлении
# Последняя строчка 23698 , значит строк в таблице ; (первая 0)


# In[9]:


#Вычислим и отобразим сводную статистику по таблице с помощью метода describe()
data.describe()


# In[10]:


# Построим гистограммы для всех столбцов с помощью метода hist()
data.hist (figsize= (15,20))


# In[11]:


#Определим пропуски и посчитаем сумму пропусков в таблице
data.isna().sum()


# In[12]:


#Определим явные дубликаты и посчитаем их сумму:
data.duplicated().sum()


# In[13]:


# Вывод:
# Не все столбцы имеют правильный вид данных, например столбец под №9 Is apparment имеет неверный тип данных , должен быть булев тип ( Аппартаменты -1 , не аппартаменты - 0),
# Выделил столбец  № 9т.к в нём подавляющее число пропусков
# Большое количество пропусков по таблице в целом.
#Из того ,что бросается в глаза отмечу, что стоимость недвижимости в г.Санкт-Петербург заметно отличается от цен в населённых пунктах вокруг.
#Минимальное значение  количества комнат - 0 (можно предположить ,что это комерческая недвижимость )
#Максимальное значение высоты потолков - 100 (очепятка?)
#Название столбца cityCenters_nearest (змеинный язык)
#Явные дубликаты в таблице отсутствуют
#Столбец  cityCenters_nearest ,змеиный язык.


# ### Предобработка данных

# In[14]:


#Выведем ещё раз пропуски в таблице
data.isna().sum()


# Разберём каждый столбец с пропусками и определим какие пропуски можно заменить на 0, а какие не стоит.
# celling_height - высота потолков в метрах :9125 пропусков, возможно тот, кто размещает объявление не знает точной высоты потолка, поэтому оставляет это знчение пропущенным. Логичной замены нет.
# floors_total - общее количество этажей : 86 пропусков, количество незначительно, на результат исследований не повлияет. Удалим пропуски для перевода в тайп инт.
# living_area - жилая площадь в квадратных метрах : 1903 пропуска,для того чтобы знать сколько метров составляет жилая из общей требуются документы, отсюда и пропуски в данных.Логичной замены нет.
# is_apartment - аппартаменты (булев тип) : 20924 пропуска, самое большое количество пропусков, возможно показатель True (1) встречается очень редко , поэтому заменим все пропуски на 0(False).
# kitchen_area - площадь кухни в квадратных метрах : 2278 пропусков,для указания точной площади кухни , тоже нужны документы, возможно объявление выставляется риелтором , когда у него ещё нет всех данных на руках- логичной замены нет.
# balcony - балконы : 11519 пропусков , можем предположить , что пропуск обозначает отсутствие балкна , следовательно можем заменить на 0.
# locality_name - название населённого пункта : 49 пропусков, количество не значительно , логичной замены нет,пропуски удалим т.к логичнее будет удалить , чем поставить поставить например 0 , локация важный фактор.
# airports_nearest -расстояние до ближайшего аэропорта в метрах :5542 пропуска,картографические данные пропусков логичной замены нет.
# cityCenters_nearest - расстояние до центра города в метрах : 5519 пропусков, картографические данные пропусковлогичной замены нет.
# parks_around3000 -число парков в радиусе 3км -5518 пропусков ,картографические данные пропусков -логичной замены нет
# parks_nearset - расстояние до ближайшего водоёма в метрах 15620 пропусков,картографические данные пропусков - логичной замены нет
# ponds_around3000 - число водоёмов в радиусе 3км 5518 пропусков,картографические данные пропусков -логичной замены нет 
# ponds_nearset - расстояние до ближайшего водоёма в метрах :14589 ,картографические данные пропусков -логичной замены нет
# days_exposition- дней было размещено объявлением : 3181 пропуск ,картографические данные - логичной замены нет 
# Итог: пропуски в столбце is_appartment меняем на 0(False) , пропуски в столбце balcony меняем на 0 , остальные пропуски оставляем т.к нет логичной замены , либо число пропусков не повлияет критично на проведение исследования.

# In[15]:


#Заменяем пропуски в столбце is appartment на False:
data['is_apartment'].fillna(False, inplace=True)
#Проверяем:
data['is_apartment'].isna().sum()


# In[16]:


#Заменяем пропуски в столбце balcony на 0:
data['balcony'].fillna(0,inplace=True)
#Проверяем:
data['balcony'].isna().sum()


# In[17]:


#Изменение типа данных ,снова рассмотрим типы данных в каждом столбце:
data.info()


# #Столбцы last_price , balcony, days_exposition dtype меняем на int
# #Столбец is_apartment меняем на bool.
# 

# In[18]:


#Для изменения float на int потребовалось санчала удалить пропуски.
data[['last_price','balcony']].dropna()
data[['last_price','balcony']].isna().sum()


# In[19]:


#Изменяем тип данных last_price,balcony с float на int
data[['last_price','balcony']] = data[['last_price','balcony']].astype(int)
#Проверяем:
data[['last_price','balcony']].isna().sum()


# In[20]:


#Изменяем тип данных is_apartment на bool
data['is_apartment'] = data['is_apartment'].astype(bool)
#Проверяем:
data.info()


# In[21]:


# Также стобец floors_total удаляем пропуски и меняем dtype с float на int
data=data.dropna(subset=['floors_total'])
data['floors_total'].isna().sum()


# In[22]:


# Меняем тип данных
data[['floors_total']]=data[['floors_total']].astype(int)
#Проверяем 
data.info()


# In[23]:


#Следующим шагом изучим уникальные значения в столбцах с названиями населённых пунктов, locality_name:
data['locality_name'].sort_values().unique()


# Видим что "посёлок","поселок городского типа","посёлок городского типа","городской посёлок"дублируют друг друга - это неявные дубликаты.
# 

# In[24]:


#Заменим названия в уже существующем столбце:
data['locality_name'] = (
    data['locality_name']
    .replace(['поселок', 'поселок городского типа','посёлок городского типа','городской посёлок'], 'посёлок', regex=True)
) 
#Проверяем:
data['locality_name'].sort_values().unique()


# In[25]:


#Удалим пропуски в столбце locality_name
data = data.dropna(subset = ['locality_name'])
#Проверяем
data['locality_name'].isna().sum()


# In[26]:


#update#
#При создании новых столбцов с помощью столбца first_day_exposition , мы выяснили что тип данных в этом столбце нужно перевести в тип datetime, Ошибка: Can only use .dt accessor with datetimelike values
#Переводим столбец first_day_exposition в datetime c помощью pd.to_datetime
data['first_day_exposition']=pd.to_datetime(data['first_day_exposition'] ,format='%Y-%m-%dT%H:%M:%S')
#Проверяем :
data.info()


# Вывод:
# На данном этапе мы заполнили пропуски (либо удалили их) и изменили dtype интересующих нас столбцов.

# 3 Посчитайте и добавьте в таблицу новые столбцы

# In[27]:


#Добавим в таблицу новые столбцы:
#цена одного квадратного метра (нужно поделить стоимость объекта на его общую площадь, а затем округлить до двух знаков после запятой);
#день недели публикации объявления (0 — понедельник, 1 — вторник и так далее);
#месяц публикации объявления;
#год публикации объявления;
#тип этажа квартиры (значения — «‎первый», «последний», «другой»);
#расстояние до центра города в километрах (переведите из м в км и округлите до ближайших целых значений).


# In[28]:


#Цена одного квадратного метра :
data['price_quare_meter'] = data['last_price'] / data['total_area']
#Округляем до двух знаков после запятой,с помощью метода round (Аргумент 2 - 2 знака после запятой)
data['price_quare_meter'] = data['price_quare_meter'].round(2)
#Проверяем:
data.head()


# In[29]:


#Добавляем столбец day_week день недели публикации объявления (0 — понедельник, 1 — вторник и так далее):
data['day_week'] = data['first_day_exposition'].dt.weekday
#Проверяем:
data.head()


# In[30]:


#Добавляем столбец с месяцем публикации (month)
data['month']= data['first_day_exposition'].dt.month
#Проверяем:
data.head()


# In[31]:


#Добавляем столбец с годом публикации (year)
data['year'] = data['first_day_exposition'].dt.year
#Проверяем:
data.head()


# In[32]:


#Добавляем столбец floor_category с этажом квартиры (значения — «первый», «последний», «другой»)
#Создаём функцию для определения категории этажа:search_floor_category
def search_floor_category(row):
    floor = row['floor']
    floors_total = row['floors_total']
    if floor == 1:
        return 'первый'
    elif floor == floors_total:
        return 'последний'
    else:
        return 'другой'
    


# In[33]:


#Теперь добавляем столбец floor_category с  функцией search_floor_category
data['floor_category'] = data.apply(search_floor_category,axis=1) #Выполнить построчно
#Проверяем:
data.tail()


# In[34]:


#Создаём столбец distance_centre_km #расстояние до центра города в километрах (переведите из м в км и округлите до ближайших целых значений).
data['distance_centre_km']=round(data['cityCenters_nearest']/1000) #Расстояние до центра в метрах делим на 1000 = расстояние в км, округляем.
#Проверяем:
data.head()


# Вывод:Добавили в таблицу новые столбцы с интересующими нас параметров в интересующем нас виде.

# 4 Проведите исследовательский анализ данных

# In[35]:


#Построим гистограммы по каждому интересующему нас столбцу таблицы:
# Общая площадь , total_area:
import matplotlib.pyplot as plt # Импортируем библиотеку для построения гистограм методом plot.
data.plot(y='total_area',kind='hist',bins=70,grid=True,range=(0,250),figsize=(10,5))


# In[36]:


data['total_area'].describe() #выведем также описательную статистику столбца total_area


# По данной гистограмме можно сделать вывод что большинство квартир имеют суммарную площадь 30-45 квадратных метров.
# Интересна просадка на графике около 50 кв.м.

# In[37]:


# Жилая площадь living_area
data.plot(y='living_area',kind='hist',bins=10,grid=True,range=(0,100),figsize=(7,5))


# In[38]:


#выведем сводную описательную статистику столбца living_area
data['living_area'].describe()


# По гистограмме мы видим что большинство объектов имеют жилую площадь, 15-20 кв.м, это можно объяснить тем, что большинство квартир могут быть небольшие квартиры студии например.

# In[39]:


#Площадь кухни , kitchen_area
data.plot(y='kitchen_area',kind='hist',bins=20,grid=True,range=(0,60),figsize=(7,5))


# In[40]:


#Сводная описательная сатистика столбца kitchen_area
data['kitchen_area'].describe()


# Кухни в основном составляют 6-8 кв.м., медиана 9, среднее 10 .

# In[41]:


#Цена объекта , last_price.
data.plot(y='last_price',kind='hist',grid=True,bins=15,range=(1000000,10000000),figsize=(7,5))


# In[42]:


#Сводная описательная статистика last_price
data['last_price'].describe()


# Установили рэндж от 1кк до 10кк, цена на большинство квартир составляет 3,5-4 миллиона рублей.

# In[43]:


#Количество комнат ,rooms
data.plot(y='rooms',kind='hist',grid=True,bins=10,range=(0,10),figsize=(7,5))


# На данном графике мы видим, что однокомнатных квартир - большинство, двухкомнатных квартир немного меньше, трёхкомнатных квартир ещё меньше и т.д

# In[44]:


#Сводная статистика по столбцу rooms
data['rooms'].describe()


# In[45]:


#Высота потолков, ceiling_height
data.plot(y='ceiling_height',kind='hist',grid=True,bins=10,range=(0,6),figsize=(7,5))


# In[46]:


#Сводная статистика по столбцу ceiling_height:
data['ceiling_height'].describe()


# Большинство потолков в квартирах имеют высоту 2,5-3 метра.

# In[47]:


#тип этажа квартиры, floor_category
data['floor_category'].hist()


# In[48]:


#Сводная статистика по столбцу floor_category:
data['floor_category'].describe()


# Квартиры на первом и последнем этажах в нашей таблице всречаются довольно редко и примерно с одинаковой частотой, большинство квартир находятся в промежутке между первым и последним.

# In[49]:


#Расстояние до центра города в метрах , cityCenters_nearest
data.plot(y='cityCenters_nearest',kind='hist',grid=True,bins=10,range=(0,60000),figsize=(7,5))


# In[50]:


#Сводная статистика по столбцу cityCenters_nearest
data['cityCenters_nearest'].describe()


# Большинство объектов недвижимости находятся на расстоянии ~ 15 км от центра города , что подтверждает среднее значение по столбцу.

# In[51]:


#Расстояние до ближайшего парка, parks_nearest (в метрах!)
data.plot(y='parks_nearest',kind='hist',grid=True,bins=10,range=(0,3500),figsize=(7,5))


# In[52]:


#Сводная статистика по столбцу parks_nearest
data['parks_nearest'].describe()


# Большинство объектов расположены на расстоянии 300-700 метров от ближайшего парка

# In[53]:


#Посмотрим сколько данных осталось после обработки
df=pd.DataFrame(data)


# In[54]:


len(data) # *это для проверки()


# In[55]:


shape=df.shape 
shape[0] #Количество строк после обработки


# In[56]:


shape[1] #количество столбцов после обработки


# In[74]:


#Изначально мы имели 22 столбца и 23699 строчки , сейчас мы имеем 28 столбцов и 23565 строчек :
# Если я всё правильно посчитал, то мы удалили 0,6% данных(строки)


# In[57]:


# Теперь рассмотрим как быстро продавались квартиры, рассмотрим столбец days_exposition , этот столбец показывает сколько дней было размещено объявление.
#Описательная статистика days_exposition
data['days_exposition'].describe()


# In[58]:


#Построим гистограмму по столбцу days_exposition
data.plot(y='days_exposition',kind='hist',grid=True,bins=50,range=(0,365),figsize=(7,5))


# Среднее значение по столбцу составляет 180 дней, медианное значение 95, но мы не можем утверждать, что если объявление сняли, то квартира продана, возможно поменялись планы на квартиру.
# Можем сделать вывод что чаще всего, квартира продаётся в первые 100 дней.

# In[59]:


#Построим диаграмму размаха по столбцу days_exposition c помощью команды boxplot:
data.boxplot(column='days_exposition',figsize=(6,6))


# In[60]:


#Ящик ~ 20-220 , Усы до 500дней), следовательно можем предположить что выше 500 , это выбросы.


# In[61]:


# Рассмотрим , зависит ли цена объекта(last_price) от :
#общей площади;total_area
#жилой площади;living_area
#площади кухни;kitchen_area
#количества комнат;rooms
#этажа, на котором расположена квартира (первый, последний, другой); floor_category
#даты размещения (день недели, месяц, год). day_week,month,year


# In[62]:


# Зависимость цены от общей площади:
data.plot(x='total_area', y ='last_price', kind ='scatter',legend=True,figsize=(7, 5),alpha = 0.05,ylim=(0,100000000),xlim=(0,150))


# Можем сказать, что цена зависит от общей площади, чем больше площадь, тем выше цена , и наоборот. **до 100кв.м.

# In[63]:


#Зависимость цены от жилой площади
data.plot(x='living_area',y='last_price', kind ='scatter',legend=True,figsize=(7, 5),alpha = 0.05,ylim=(0,100000000),xlim=(0,100))


# Видим что с увелечением жилой площади растёт и цена. **до 60 кв.м.

# In[64]:


#площадь кухни
data.plot(x='kitchen_area',y='last_price', kind ='scatter',legend=True,figsize=(7, 5),alpha = 0.05,ylim=(0,100000000),xlim=(0,100))


# Вместе с площадью кухни растёт и цена , теперь уже до 20кв.м.

# In[65]:


#Зависимость цены от количества комнат :
data.plot(x='rooms',y='last_price', kind ='scatter',legend=True,figsize=(7, 5),alpha = 0.05,ylim=(0,100000000),xlim=(0,10))


# По данному графику можно сказать что самыми дорогими являются 3х комнатные квартиры .4х комнатные немного отстают,непонятно почему пятикомнатные дешевле, возможно это очень старые комунальные квартиры.

# In[66]:


# Зависимость цены от категории этажа не получается, т.к выдаёт ошибку, создаём сводную таблицу
last_price_floor_category=data.pivot_table(index='floor_category',values='last_price',aggfunc=['mean','count','median'])
last_price_floor_category.columns =['mean','count','median']
last_price_floor_category.plot()




# Из графика видно что среднее для квартир на первом этаже минимальна, максимальна для последних этажей. Медиана также минимальна для квартир на первом этаже, но максимальна в сторону между первым и последним.

# In[67]:


# Зависимость от дня размещения : day_week
data.plot(x='day_week',y='last_price', kind ='scatter',legend=True,figsize=(7, 5),alpha = 0.05,ylim=(0,10000000),xlim=(0,7))
#Зависимость от месяца размещения: month:
data.plot(x='month',y='last_price', kind ='scatter',legend=True,figsize=(7, 5),alpha = 0.05,ylim=(0,10000000),xlim=(0,12))
#Зависимость от года размещения:year:
data.plot(x='year',y='last_price', kind ='scatter',legend=True,figsize=(7, 5),alpha = 0.05,ylim=(0,10000000),xlim=(2010,2020))


# Можем сказать что день и месяц размещения на цену не влияет, а вот год, 2014 выделяется, возможно в 2014 году был рост цены на недвижимость в связи с кризисом

# In[68]:


#Найдём среднюю цену одного квадратного метра в 10 населённых пунктах с наибольшим числом объявлений
more_ads = data['locality_name'].value_counts().head(10) #создадим переменную more_ads заполним её 10 насёлёнными пунктами с наибольшим числом объявлений
more_ads.head(10) #выведем на экран


# In[69]:


more_ads_pivot_table = data.query('locality_name in @more_ads.index').pivot_table(index='locality_name',values='price_quare_meter')
more_ads_pivot_table.sort_values(by='price_quare_meter', ascending=False) #извелекли название населённых пунктов из переменной по индексу, составили сводную таблицу,отсортировали по уменьшению.


# Самая высокая стоимость квадратного метра в Санкт-Петербурге и составляет 114868р., самая низкая в г.Выборг и составляет 58141р.

# In[70]:


#Выделим квартиры в Санкт-Петербурге с помощью столбца locality_name и вычислим среднюю цену каждого километра. 
#Создадим переменную СПБ и извлекём из по столбцу Locality_name Санкт-Петербург
spb=data.query('locality_name== "Санкт-Петербург"')
spb.head()
len(spb)


# 15651 объявление о продаже недвижимости в Санкт-Петербурге

# In[71]:


#Создадим сводную таблицу в которой будет средняя цена за квадратный метр и расстояние в км.
spb.pivot_table(index='distance_centre_km',values='price_quare_meter').plot() # построим график по сводной таблице


# Стоимость жилья в самом центре почти достигает 250 т.р за квадратный метр. Первые 3 километра, при отдалении от центра цена за квадратный метр падает почти на 40т.р за км,дальше идёт рост с 3до 7 километров , возможно это какой-то элитный район, и далее плавно снижается.

# На данном этапе был проведён исследовательский анализ данных:изучили как быстро продавались квартиры, что больше всего влияет на стоимость объекта.

# In[ ]:





# 5 Общий вывод
# Мы провели Исследование данных о продаже квартир в Санкт-Петербурге и соседних населенных пунктах.
# Мы изучили общую информацию о проекте.
# Предобработали данные, обработали дубликаты, изменили типы данных столбцов которые необходимы для анализа.
# Добавили в таблицу новые столбцы, которые извлекли из вводных данных.
# Изучили параметры, влияющие на цену объектов.
# Провели исследовательский анализ данных.
# По результатам проведённых исследований можно сказать, что стоимость недвижимости зависит от множества факторов.
# Основными параметрами влияющими на стоимость квартиры можно назвать её отдалённость к центру (рай.центру), т.к мы выяснили что разница между стоимостью квадратного метра в Санкт-Петербурге и Выборге разнятся почти в два раза , 114868р.в Питере и  58141р
# в Выборге.
# Также очень важным фактором является площадь объекта недвижимости, чем больше площадь , тем больше цена за неё.
# Выполняя проектную работу мы выяснили , что :
# -однокомнатных квартир - большинство, двухкомнатных квартир немного меньше, трёхкомнатных квартир ещё меньше и т.д
# -чаще всего, квартира продаётся в первые 100 дней.
# -Большинство объектов недвижимости находятся на расстоянии ~ 15 км от центра города
# -Большинство квартир имеют суммарную площадь 30-45 квадратных метров.
# -Большинство объектов расположены на расстоянии 300-700 метров от ближайшего парка
# -Большинство двухкомнтаных квартир имеют общую площадь от 50 до 100 кв.м. 

# **Чек-лист готовности проекта**
# 
# Поставьте 'x' в выполненных пунктах. Далее нажмите Shift+Enter.

# - [x]  открыт файл
# - [х]  файлы изучены (выведены первые строки, метод `info()`, гистограммы и т.д.)
# - [х]  определены пропущенные значения
# - [х]  заполнены пропущенные значения там, где это возможно
# - [х]  есть пояснение, какие пропущенные значения обнаружены
# - [х]  изменены типы данных
# - [х]  есть пояснение, в каких столбцах изменены типы и почему
# - [х]  устранены неявные дубликаты в названиях населённых пунктов
# - [х]  устранены редкие и выбивающиеся значения (аномалии) во всех столбцах
# - [х]  посчитано и добавлено в таблицу: цена одного квадратного метра
# - [х]  посчитано и добавлено в таблицу: день публикации объявления (0 - понедельник, 1 - вторник и т.д.)
# - [х]  посчитано и добавлено в таблицу: месяц публикации объявления
# - [х]  посчитано и добавлено в таблицу: год публикации объявления
# - [х]  посчитано и добавлено в таблицу: тип этажа квартиры (значения — «первый», «последний», «другой»)
# - [х]  посчитано и добавлено в таблицу: расстояние в км до центра города
# - [х]  изучены и описаны следующие параметры:
#         - общая площадь;
#         - жилая площадь;
#         - площадь кухни;
#         - цена объекта;
#         - количество комнат;
#         - высота потолков;
#         - этаж квартиры;
#         - тип этажа квартиры («первый», «последний», «другой»);
#         - общее количество этажей в доме;
#         - расстояние до центра города в метрах;
#         - расстояние до ближайшего аэропорта;
#         - расстояние до ближайшего парка;
#         - день и месяц публикации объявления
# - [х]  построены гистограммы для каждого параметра
# - [х]  выполнено задание: "Изучите, как быстро продавались квартиры (столбец days_exposition). Этот параметр показывает, сколько дней «висело» каждое объявление.
#     - Постройте гистограмму.
#     - Посчитайте среднее и медиану.
#     - В ячейке типа markdown опишите, сколько обычно занимает продажа. Какие продажи можно считать быстрыми, а какие — необычно долгими?"
# - [х]  выполнено задание: "Какие факторы больше всего влияют на общую (полную) стоимость объекта? Постройте графики, которые покажут зависимость цены от указанных ниже параметров. Для подготовки данных перед визуализацией вы можете использовать сводные таблицы."
#         - общей площади;
#         - жилой площади;
#         - площади кухни;
#         - количество комнат;
#         - типа этажа, на котором расположена квартира (первый, последний, другой);
#         - даты размещения (день недели, месяц, год);
# - [х]  выполнено задание: "Посчитайте среднюю цену одного квадратного метра в 10 населённых пунктах с наибольшим числом объявлений. Выделите населённые пункты с самой высокой и низкой стоимостью квадратного метра. Эти данные можно найти по имени в столбце `locality_name`."
# - [х]  выполнено задание: "Ранее вы посчитали расстояние до центра в километрах. Теперь выделите квартиры в Санкт-Петербурге с помощью столбца `locality_name` и вычислите среднюю цену каждого километра. Опишите, как стоимость объектов зависит от расстояния до центра города."
# - [х]  в каждом этапе есть промежуточные выводы
# - [х]  есть общий вывод

# In[ ]:




